
/*********************************************************************************
 * Modifications Copyright 2017-2019 eBay Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *    https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed
 * under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
 * CONDITIONS OF ANY KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations under the License.
 *
 *********************************************************************************/
#pragma once

#include <folly/futures/Future.h>
#include <homestore/replication/repl_dev.h>
#include "homeblks_impl.hpp"

namespace homeblocks {

class HomeBlocksImpl;

class HBListener : public homestore::ReplDevListener {
public:
    explicit HBListener(HomeBlocksImpl* hb) : hb_(hb) {}

    virtual ~HBListener() = default;

    void on_commit(int64_t lsn, sisl::blob const& header, sisl::blob const& key,
                   std::vector< homestore::MultiBlkId > const& blkids,
                   cintrusive< homestore::repl_req_ctx >& ctx) override;

    bool on_pre_commit(int64_t lsn, const sisl::blob& header, const sisl::blob& key,
                       cintrusive< homestore::repl_req_ctx >& ctx) override;

    void on_error(homestore::ReplServiceError error, const sisl::blob& header, const sisl::blob& key,
                  cintrusive< homestore::repl_req_ctx >& ctx) override;

    homestore::ReplResult< homestore::blk_alloc_hints >
    get_blk_alloc_hints(sisl::blob const& header, uint32_t data_size,
                        cintrusive< homestore::repl_req_ctx >& hs_ctx) override;
    // group_id is the uuid generated by HomeBlocks when create_volume->create_repl_dev(gid) is called;
    // when volume is being destroyed, on_destroy is going to be triggered to listener that this volume's gid is
    // destroyed;
    void on_destroy(const homestore::group_id_t& group_id) override;

    // <<<<< with r1: mock apis that will never be triggered >>>>
    void on_replace_member(const homestore::replica_member_info& member_out,
                           const homestore::replica_member_info& member_in) override {}
    void on_rollback(int64_t lsn, const sisl::blob& header, const sisl::blob& key,
                     cintrusive< homestore::repl_req_ctx >& ctx) override {}
    void on_restart() override { LOGD("HBListener::on_restart()"); }
    /// @brief Called when the snapshot is being created by nuraft;
    homestore::AsyncReplResult<> create_snapshot(std::shared_ptr< homestore::snapshot_context > context) override {
        return folly::makeSemiFuture< homestore::ReplResult< folly::Unit > >(folly::Unit{});
    }
    virtual bool apply_snapshot(std::shared_ptr< homestore::snapshot_context > context) override { return true; }
    virtual std::shared_ptr< homestore::snapshot_context > last_snapshot() override { return nullptr; }
    virtual int read_snapshot_obj(std::shared_ptr< homestore::snapshot_context > context,
                                  std::shared_ptr< homestore::snapshot_obj > snp_obj) override {
        return 0;
    }
    virtual void write_snapshot_obj(std::shared_ptr< homestore::snapshot_context > context,
                                    std::shared_ptr< homestore::snapshot_obj > snp_obj) override {}
    virtual void free_user_snp_ctx(void*& user_snp_ctx) override {}
    virtual void on_no_space_left(homestore::repl_lsn_t lsn, homestore::chunk_num_t chunk_id) override {}
    virtual void notify_committed_lsn(int64_t lsn) override {}
    virtual void on_config_rollback(int64_t lsn) override {}
    // <<<<< end of r1: mockup apis >>>>>>>>>>

private:
    HomeBlocksImpl* hb_{nullptr};
};
} // namespace homeblocks
